import React, { useEffect, useRef } from 'react';
import mapboxgl from 'mapbox-gl';

// We're using OpenStreetMap — no token needed
// mapboxgl.accessToken = import.meta.env.VITE_MAPBOX_TOKEN; ← DELETED

const MapView = ({ claims, onClaimClick }) => {
  const mapContainer = useRef(null);
  const map = useRef(null);

  useEffect(() => {
    if (map.current) return;

    // Initialize map with OpenStreetMap tiles
    map.current = new mapboxgl.Map({
      container: mapContainer.current,
      style: {
        version: 8,
        sources: {
          'osm-tiles': {
            type: 'raster',
            tiles: ['https://tile.openstreetmap.org/{z}/{x}/{y}.png'],
            tileSize: 256,
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
          }
        },
        layers: [
          {
            id: 'osm-layer',
            type: 'raster',
            source: 'osm-tiles',
            minzoom: 0,
            maxzoom: 19
          }
        ]
      },
      center: [82.0, 22.0], // Center on India
      zoom: 5
    });

    // Add navigation controls
    map.current.addControl(new mapboxgl.NavigationControl(), 'top-right');

    // Add markers for claims
    const markers = [];

    const addMarkers = () => {
      claims.forEach(claim => {
        if (!claim.families) return;

        const el = document.createElement('div');
        el.className = 'marker';
        el.style.width = '20px';
        el.style.height = '20px';
        el.style.borderRadius = '50%';
        el.style.cursor = 'pointer';

        // Color by status
        if (claim.status === 'approved') el.style.backgroundColor = '#10b981'; // green
        else if (claim.status === 'rejected') el.style.backgroundColor = '#ef4444'; // red
        else el.style.backgroundColor = '#f59e0b'; // yellow

        const marker = new mapboxgl.Marker(el)
          .setLngLat([
            claim.claim_geom.coordinates[0],
            claim.claim_geom.coordinates[1]
          ])
          .setPopup(new mapboxgl.Popup({ offset: 25 })
            .setHTML(`
              <h4>${claim.families.name}</h4>
              <p><strong>Village:</strong> ${claim.families.village}</p>
              <p><strong>State:</strong> ${claim.families.state}</p>
              <p><strong>Type:</strong> ${claim.claim_type}</p>
              <p><strong>Status:</strong> ${claim.status}</p>
              <p><strong>Date:</strong> ${claim.claim_date}</p>
              ${claim.resolution_date ? `<p><strong>Resolved:</strong> ${claim.resolution_date}</p>` : ''}
              ${claim.remarks ? `<p><strong>Remarks:</strong> ${claim.remarks}</p>` : ''}
            `)
          )
          .addTo(map.current);

        el.addEventListener('click', () => {
          onClaimClick(claim);
        });

        markers.push(marker);
      });
    };

    map.current.on('load', addMarkers);

    return () => {
      if (map.current) {
        markers.forEach(marker => marker.remove());
        map.current.remove();
        map.current = null;
      }
    };
  }, [claims, onClaimClick]);

  return (
    <div
      ref={mapContainer}
      className="w-full h-full"
      style={{ minHeight: '100vh' }}
    />
  );
};

export default MapView;